{"version":3,"sources":["dreambox.js"],"names":[],"mappings":";;;;;;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;IAGqB,Q;;;;;;;AAMjB,wBAA2E;AAAA,YAA/D,IAA+D,yDAAxD,QAAwD;AAAA,YAA9C,OAA8C,yDAApC,EAAE,SAAS,UAAX,EAAuB,KAAK,IAA5B,EAAoC;;AAAA;;AACvE,YAAI;AACA,gBAAM,SAAS,oBAAkB,IAAlB,CAAf;AACA,mBAAO,MAAP,CAAc,IAAd,EAAoB,OAApB;AACA,iBAAK,MAAL,GAAc,IAAI,iBAAO,MAAX,CAAkB,IAAI,MAAJ,CAAW,OAAX,CAAlB,CAAd;AACA,mBAAQ,YAAR,CAAqB,KAAK,MAA1B;AACH,SALD,CAKE,OAAO,KAAP,EAAc;AACZ,kBAAM,2DAAkD,IAAlD,aAAN;AACH;AACJ;;;;;;;;;;;;;;;;;oCAQQ,KAAK,O;;;;;;uCACA,KAAK,MAAL,CAAY,UAAZ,E;;;AACN,qCAAK,OAAL,GAAe,IAAf;;;iEAEG,KAAK,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qCASR,KAAK,O;;;;;;uCACC,KAAK,MAAL,CAAY,SAAZ,E;;;AACN,qCAAK,OAAL,GAAe,KAAf;;;kEAEG,KAAK,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAUN,G,EAAK,G,EAAK,G;;;;;;uCACV,KAAK,KAAL,E;;;AACN,sCAAM;AACF,wCAAI,GADF;AAEF,6CAAS,KAAK;AAFZ,iCAAN;;uCAIM,KAAK,MAAL,CAAY,QAAZ,CAAqB,GAArB,EAA0B,GAA1B,EAA+B,OAAO,KAAK,GAA3C,C;;;kEACC,G;;;;;;;;;;;;;;;;;;;;;;;;;;kFAQD,G;;;;;;uCACA,KAAK,KAAL,E;;;AACN,sCAAM;AACF,wCAAI,GADF;AAEF,6CAAS,KAAK;AAFZ,iCAAN;;uCAIa,KAAK,MAAL,CAAY,QAAZ,CAAqB,GAArB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kFAQN,G;;;;;;uCACD,KAAK,KAAL,E;;;AACN,sCAAM;AACF,wCAAI,GADF;AAEF,6CAAS,KAAK;AAFZ,iCAAN;;uCAIM,KAAK,MAAL,CAAY,SAAZ,CAAsB,GAAtB,C;;;kEACC,G;;;;;;;;;;;;;;;;;;;;;kBAtFM,Q","file":"dreambox.js","sourcesContent":["/** @module Dreambox*/\nimport Catbox from 'catbox';\nimport Promise from 'bluebird';\nimport { DreamboxError } from './error';\n\n/** Class representing Dreambox */\nexport default class Dreambox {\n    /**\n     * Constructs Dreambox\n     *\n     * @param {String} type - Catbox type, e.g. memory, redis\n     */\n    constructor(type = 'memory', options = { segment: 'dreambox', ttl: 5000 }) {\n        try {\n            const Engine = require(`catbox-${type}`);\n            Object.assign(this, options);\n            this.client = new Catbox.Client(new Engine(options));\n            Promise.promisifyAll(this.client);\n        } catch (error) {\n            throw new DreamboxError(`Please do npm install catbox-${type} --save`);\n        }\n    }\n\n    /**\n     * Starts the dreambox.\n     *\n     * return {Boolean}\n     */\n    async start() {\n        if (!this.started) {\n            await this.client.startAsync();\n            this.started = true;\n        }\n        return this.started;\n    }\n\n    /**\n     * Stops the dreambox.\n     *\n     * return {Boolean}\n     */\n    async stop() {\n        if (this.started) {\n            await this.client.stopAsync();\n            this.started = false;\n        }\n        return this.started;\n    }\n\n    /**\n     * Sets a key with val in a segment with specified ttl in milliseconds.\n     *\n     * @param {String} key\n     * @param {Object} val\n     * @param {Number} ttl\n     */\n    async set(key, val, ttl) {\n        await this.start();\n        key = {\n            id: key,\n            segment: this.segment\n        };\n        await this.client.setAsync(key, val, ttl || this.ttl);\n        return key;\n    }\n\n    /**\n     * Gets val using key.\n     *\n     * @param {String} key\n     */\n    async get(key) {\n        await this.start();\n        key = {\n            id: key,\n            segment: this.segment\n        };\n        return await this.client.getAsync(key);\n    }\n\n    /**\n     * Drops a key.\n     *\n     * @param {String} key\n     */\n    async drop(key) {\n        await this.start();\n        key = {\n            id: key,\n            segment: this.segment\n        };\n        await this.client.dropAsync(key);\n        return key;\n    }\n}\n"],"sourceRoot":"/Users/diorahman/Experiments/hooq/src/luigi/dreambox/lib"}